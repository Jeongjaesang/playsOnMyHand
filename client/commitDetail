# 메모 사항 (염두하고 구현해야 함)

로그인 연결 흐름 

1. 클라이언트 -> OauthProvider로 로그인 페이지 요청
2. 로그인 인증 완료
3. /OAuthCallback 페이지로 리다이렉션
4. /OAuthCallback 페이지에서 백엔드로부터 accessToken 요청하고 받아서 로그인


웹 소켓 연결 흐름

사용자 로그인 -> 웹 소켓 연결된 상태,
사용자 로그인x -> 웹 소켓 끊어짐

1. 사용자 로그인 == accessToken을 백엔드 서버로부터 받음 
2. 받은 accessToken을 webSocket에 전달
3. webSocket 연결.
위 작업을 최상위 컴포넌트(App.tsx)에서 useEffect로 구현

웹 소켓 관련 기능

상세 페이지의 내가 단 댓글에 누군가 좋아요 또는 대댓글을 남겼을 때 알림

알림 오는건 websocket으로 받되, ("notification 이벤트를 백엔드 서버와 구독")
댓글 상태를 react Query로 관리. 
- 왜? webSocket은 실시간으로 받아야 하지만, 알림 페이지에서는 알림 메세지들을 가져와야 함

# 이번 커밋 작업 사항

하고 있는 것: 다른 사용자의 댓글에 좋아요|대댓글 입력 기능 (웹 소켓 적으로 어텋게 해야 하나?)

댓글 추가 완료 
댓글 좋아요 완료 

대댓글 추가 완료



# 이번 커밋 작업 사항에서 고민한 부분

현재 방식
- performanceDetail 페이지에서 서버로부터 Performance객체 하나를 가져와서 랜더링 
- 댓글을 추가하거나, 대댓글을 추가하는 등, Performance객체의 어느 한 부분이라도 변경 시킬 때 마다   
  클라이언트 측에서 관리하는 Performance객체 전체를 업데이트 하고, Performance객체 자체를 가져와야 함

문제가 될 수 있는 부분: 댓글 같은 경우 댓글만 변경이 되었는데도, Performance의 관련 없는 다른 부분까지 가져와짐
-> comments가 변경될 때마다 Performance 전체를 다시 가져와야 함 → 네트워크 낭비
-> likes, replies 변경 시에도 Performance 전체를 다시 패칭함 → 불필요한 리렌더링
-> 만약 Performance 객체가 크다면, 작은 변경에도 큰 데이터를 다시 가져오는 비효율 발생


gpt 제안하는 방식 
 - 클라이언트에서 performance 객체 하나를 관리하는 게 아니라, 
 performance 객체를 부분별로 나눈다. performance 정보를 보여주는 부분, performance의 댓글 부분
 why?  
  통신이 잦은 댓글 부분만 분리하면 네트워크 대역폭이 감소 + 랜더링 비용도 감소 

-고려해야 할 부분, 기존에는 api 콜을 한번(performance 객체 하나)만 보내면 됬는데,
 이런 방식을 쓸 경우 api 콜을 두 번(performance 정보, 댓글 정보)보내야 해서 
 초기 랜더링 시간이 늘어날 수도 있음

# 앞으로 해야할 것

댓글 좋아요 취소 미완

대댓글 좋아요 미완 
대댓글 좋아요 취소 미완

댓글 수정 미완
댓글 삭제 미완

대댓 수정 미완
대댓 삭제 미완 


댓글 추가/수정/삭제
대댓글 추가/수정/삭제 까지 고려

  알림페이지
    - 더미 알림 데이터, 어텋게 구현?
    - (기획)최근 한 달간 알림만 보여주기 (댓글이든, 공연 알림이든), 한 달 지난 알림은 삭제하기 -- 구현위치가 클라이언트? 백엔드?
    - (기획)환영 알림은, 처음 로그인 했을 때만  

-에러 바운더리 설정


